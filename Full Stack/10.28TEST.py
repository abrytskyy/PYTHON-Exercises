# 1.
# Что такое класс в Python? a) Это способ создания списков b) Это объект, представляющий собой шаблон для создания
# других объектов c) Это способ определения функций d) Это способ создания переменных 2. Что такое объект в Python?
# a) Это способ создания списков b) Это экземпляр класса, имеющий свои собственные атрибуты и методы c) Это способ
# определения функций d) Это способ создания переменных 3. Какой метод вызывается при создании нового объекта
# класса?
# a) __new__()
# b) __init__()
# c) __del__()
# d) __str__()
#
# 4. Какой метод вызывается при удалении объекта класса?
# a) __new__()
# b) __init__()
# c) __del()
# __
# d) __str__()
#
# 5.
# Для чего используется метод
# __init__()
# в
# Python?
# a) Для создания нового объекта класса
# b) Для инициализации атрибутов объекта
# c) Для удаления объекта класса
# d) Для представления объекта в виде строки
#
# 6. Какие аргументы обязательно должны присутствовать в методе
# __init__()?
# a) self
# b) cls
# c) obj
# d) init
#
# 7. Какой метод вызывается, когда вы пытаетесь вывести объект на экран с помощью
# print()?
# a) __new__()
# b) __init__()
# c) __del()
# __
# d) __str__()
#
# 8. Для чего используется метод __str__()?
# a) Для создания нового объекта класса
# b) Для инициализации атрибутов объекта
# c) Для удаления объекта класса
# d) Для представления объекта в виде строки
#
# 9.
# Какой метод вызывается, когда объект класса уничтожается и освобождает ресурсы?
# a) __new__()
# b) __init__()
# c) __del()
# d) __str__()
#
# 10. Какие аргументы обязательно должны присутствовать в методе
# __str__()?
# a) self
# b) cls
# c) obj
# d) str
#
# 11. Что такое атрибут класса?
# a) Атрибут, который принадлежит объекту класса
# b) Атрибут, который принадлежит классу и разделяется всеми его объектами
# c) Атрибут, который можно изменять только при создании объекта
# d) Атрибут, который можно изменять только в методе
# __init__()
#
# 12. Как создать атрибут класса в Python? a) Просто присвоить значение переменной внутри класса b) Использовать метод
# __init__()
# c) Использовать метод
# __str__()
# d) Использовать метод
# __del()
# __
#
# 13.
# Как изменить значение атрибута класса?
# a) Изменить его внутри метода
# __init__()
# b) Изменить его внутри метода
# __str__()
# c) Изменить его внутри метода
# __del()
# __
# d) Изменить его внутри метода объекта
#
# 14.
# Что делает
# метод
# __new__()?
# a) Инициализирует
# объект
# b) Удаляет
# объект
# c) Создает
# новый
# объект
# класса
# d) Возвращает
# значение
# атрибута
# объекта
#
# 15.
#
#
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
#
# obj = MyClass(42)
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 42
# b) 0
# c) "42"
# d) Ошибка
#
# 16.
#
#
# class MyClass:
#     value = 10
#
#
# obj1 = MyClass()
# obj2 = MyClass()
# obj1.value = 20
#
# print(obj1.value, obj2.value)
#
# Что
# выведет
# этот
# код?
# a) 10
# 10
# b) 20
# 20
# c) 20
# 10
# d) 10
# 20
#
# 17.
#
#
# class MyClass:
#     def __del__(self):
#         print("Deleted")
#
#
# obj = MyClass()
# del obj
#
# Что
# выведет
# этот
# код?
# a) "Deleted"
# b) Ничего
# c) "MyClass object deleted"
# d) Ошибка
#
# 18.
#
#
# class MyClass:
#     def __str__(self):
#         return "MyClass"
#
#
# obj = MyClass()
# print(obj)
# Что
# выведет
# этот
# код?
# a) < main.MyClass
# object
# at
# 0
# x... >
# b) "MyClass"
# c) MyClass
# d) Ошибка
#
# 19.
#
#
# class MyClass:
#     def __init__(self):
#         self.value = 5
#
#
# obj = MyClass()
# obj.value = 7
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 0
# b) 5
# c) 7
# d) "MyClass(7)"
#
# 20.
#
#
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
#
# obj1 = MyClass(10)
# obj2 = MyClass(20)
# print(obj1.value + obj2.value)
#
# Что
# выведет
# этот
# код?
# a) 10
# b) 20
# c) 30
# d) 1020
#
# 21.
#
#
# class MyClass:
#     def __str__(self):
#         return str(self.value)
#
#
# obj = MyClass()
# print(obj)
#
# Что
# выведет
# этот
# код?
# a) < main.MyClass
# object
# at
# 0
# x... >
# b) "MyClass"
# c) 0
# d) Ошибка
#
# 22.
#
#
# class MyClass:
#     value = 10
#
#
# obj = MyClass()
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 0
# b) 10
# c) "MyClass(10)"
# d) Ошибка
#
# 23.

#
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
#
# obj1 = MyClass(42)
# obj2 = MyClass(42)
# print(obj1 is obj2)
#
# Что
# выведет
# этот
# код?
# a) True
# b) False
# c) Ошибка
# d) Ничего
#
# 24.
#
#
# class MyClass:
#     count = 0
#
#     def __init__(self):
#         MyClass.count += 1
#
#
# obj1 = MyClass()
# obj2 = MyClass()
# print(obj1.count)
#
# Что
# выведет
# этот
# код?
# a) 0
# b) 1
# c) 2
# d) Ошибка
#
# 25.
#
#
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
#
# obj = MyClass(42)
# del obj
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 42
# b) 0
# c) "42"
# d) Ошибка
#
# 26.
#
#
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
#
# obj1 = MyClass(10)
# obj2 = obj1
# obj2.value = 20
# print(obj1.value)
#
# Что
# выведет
# этот
# код?
# a) 10
# b) 20
# c) 0
# d) "MyClass(10)"
#
# 27.
#
#
# class MyClass:
#     value = 10
#
#
# obj = MyClass()
# obj.value = 15
# del obj.value
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 10
# b) 15
# c) 0
# d) Ошибка
#
# 28.
#
#
# class MyClass:
#     def __init__(self):
#         self.value = 5
#
#
# obj = MyClass()
# print(obj.value)
# obj.__dict__['value'] = 7
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 5
# 7
# b) 0
# 0
# c) 7
# 7
# d) Ошибка
#
# 29.
#
#
# class MyClass:
#     value = 10
#
#
# obj = MyClass()
# del obj.value
# print(obj.value)
#
# Что
# выведет
# этот
# код?
# a) 10
# b) 0
# c) Ошибка
# d) "MyClass(10)"
#
# 30.
# x = 5
#
#
# def func(x):
#     x = 10
#     return x
#
#
# print(func(x))
# print(x)
#
# Что
# выведет
# этот
# код?
# a) 5
# 10
# b) 10
# 10
# c) 10
# 5
# d) 5
# 5
#
# 31.
#
#
# def add(x, y=5):
#     return x + y
#
#
# result = add(3)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 3
# b) 5
# c) 8
# d) Ошибка
#
# 32.
#
#
# def increment(x):
#     x += 1
#
#
# num = 5
# increment(num)
# print(num)
#
# Что
# выведет
# этот
# код?
# a) 5
# b) 6
# c) Ошибка
# d) 0
#
# 33.
#
#
# def modify_list(lst):
#     lst.append(42)
#
#
# my_list = [1, 2, 3]
# modify_list(my_list)
# print(my_list)
#
# Что
# выведет
# этот
# код?
# a) [1, 2, 3]
# b) [1, 2, 3, 42]
# c) [42]
# d) Ошибка
#
# 34.
#
#
# def outer_function(x):
#     def inner_function(y):
#         return x + y
#
#     return inner_function
#
#
# add_five = outer_function(5)
# result = add_five(10)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 5
# b) 10
# c) 15
# d) Ошибка
#
# 35.
#
#
# def decorator(func):
#     def wrapper(x):
#         result = func(x)
#         return result * 2
#
#     return wrapper
#
#
# @decorator
# def add_one(x):
#     return x + 1
#
#
# result = add_one(3)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 3
# b) 6
# c) 8
# d) Ошибка
#
# 36.
#
#
# def square(func):
#     return lambda x: func(x) ** 2
#
#
# @square
# def identity(x):
#     return x
#
#
# result = identity(4)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 4
# b) 16
# c) 8
# d) Ошибка
#
# 37.
#
#
# def outer(x):
#     def inner(y):
#         return x * y
#
#     return inner
#
#
# multiply_by_two = outer(2)
# result = multiply_by_two(3)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 6
# b) 2
# c) 8
# d) Ошибка
#
# 38.
#
#
# def decorator(func):
#     def wrapper(*args, **kwargs):
#         result = func(*args, **kwargs)
#         return result * 2
#
#     return wrapper
#
#
# @decorator
# def add(x, y):
#     return x + y
#
#
# result = add(3, 4)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 3
# b) 8
# c) 14
# d) Ошибка
#
# 39.

#
# def factorial(n):
#     if n == 0:
#         return 1
#     else:
#         return n * factorial(n - 1)
#
#
# result = factorial(5)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 15
# b) 120
# c) 25
# d) Ошибка
#
# 40.
#
#
# def decorator(arg1, arg2):
#     def real_decorator(func):
#         def wrapper(*args, **kwargs):
#             result = func(*args, **kwargs)
#             return result * (arg1 + arg2)
#
#         return wrapper
#
#     return real_decorator
#
#
# @decorator(2, 3)
# def add(x, y):
#     return x + y
#
#
# result = add(3, 4)
# print(result)
#
# Что
# выведет
# этот
# код?
# a) 14
# b) 35
# c) 70
# d) Ошибка
#
# 41.
#
#
# def execute(func, x):
#     return func(x)
#
#
# def square(x):
#     return x ** 2
#
#
# def cube(x):
#     return x ** 3
#
#
# result1 = execute(square, 5)
# result2 = execute(cube, 3)
# print(result1, result2)
#
# Что
# выведет
# этот
# код?
# a) 25
# 27
# b) 2527
# c) 14
# d) Ошибка
#
# 42.
#
#
# def modify_list(my_list):
#     my_list = [1, 2, 3, 4]
#     my_list.append(5)
#
#
# original_list = [10, 20, 30]
# modify_list(original_list)
# print(original_list)
#
# Что
# выведет
# этот
# код?
# a) [1, 2, 3, 4, 5]
# b) [10, 20, 30, 1, 2, 3, 4, 5]
# c) [10, 20, 30]
# d) Ошибка
#
# 43.
# a)    Создайте
# словарь, представляющий
# информацию
# о
# студенте(имя, возраст, средний
# балл).
# b)    Добавьте
# вложенные
# словари, чтобы
# представить
# информацию
# о
# нескольких
# студентах.
# c)    Найдите
# средний
# возраст
# среди
# всех
# студентов.
# d)    Найдите
# студента
# с
# наивысшим
# средним
# баллом.
#
# 44.
# Создайте
# список
# целых
# чисел
# и
# найдите
# сумму
# всех
# элементов.
# 45.
# Создайте
# список
# слов
# и
# найдите
# самое
# длинное
# слово.
# 46.
# Создайте
# два
# списка
# чисел
# и
# найдите
# их
# сумму
# попарно.
# 47.
# Создайте
# список
# и
# удалите
# из
# него
# все
# дубликаты.
# 48.
# Создайте
# список, содержащий
# списки
# чисел, и
# найдите
# сумму
# элементов
# внутренних
# списков.
# 49.
# Создайте
# список, в
# котором
# каждый
# элемент - это
# пара(имя, возраст), и
# найдите
# средний
# возраст.
# 50.
# Создайте
# список, представляющий
# матрицу, и
# выполните
# операцию
# транспонирования.
# 51.
# Напишите
# программу, которая
# находит
# самое
# длинное
# слово
# в
# строке.
# 52.
# Напишите
# программу, которая
# удаляет
# все
# знаки
# препинания
# из
# строки.
# 53.
# Напишите
# программу, которая
# проверяет, начинается
# ли
# строка
# с
# определенного
# префикса.
# 54.
# Создайте
# два
# множества
# и
# найдите
# их
# объединение.
# 55.
# Создайте
# два
# множества
# и
# найдите
# их
# пересечение.
# 56.
# Создайте
# множество
# с
# буквами
# алфавита
# и
# проверьте, содержит
# ли
# оно
# все
# гласные
# буквы.
# 57.
# Создайте
# множество
# с
# числами
# и
# найдите
# максимальное
# и
# минимальное
# значения.
# 58.
# Создайте
# два
# множества
# и
# найдите
# разницу
# между
# ними(элементы, которые
# есть
# в
# первом, но
# отсутствуют
# во
# втором).
# 59.
# Создайте
# словарь
# с
# данными
# о
# квартире(адрес, площадь, количество
# комнат) и
# выведите
# площадь
# квартиры.
# 60.
# Создайте
# словарь
# с
# данными
# о
# языке
# программирования(название, создатель, год
# создания) и
# найдите
# создателя
# языка.
# 61.
# Создайте
# список
# словарей, представляющий
# информацию
# о
# рецептах(название, ингредиенты
# и
# их
# количество) и
# найдите
# все
# рецепты, в
# которых
# используется
# определенный
# ингредиент.
# 62.
# Создайте
# список
# словарей, представляющий
# информацию
# о
# городах(название, население, страна)
# и
# найдите
# город
# с
# наибольшим
# населением.
# 63.
# Создайте
# функцию, которая
# определяет, является
# ли
# строка
# палиндромом.
# 64.
# Создайте
# функцию, которая
# находит
# наименьшее
# значение
# в
# списке
# чисел.
# 65.
# Создайте
# функцию, которая
# находит
# количество
# гласных
# букв
# в
# строке.
# 66.
# Создайте
# функцию, которая
# принимает
# произвольное
# количество
# аргументов
# и
# возвращает
# их
# сумму, используя
# оператор * для
# распаковки.
# 67.
# Напишите
# функцию, которая
# принимает
# список
# чисел
# и
# возвращает
# наименьшее
# число, используя
# оператор * для
# распаковки
# списка.
# 68.
# Создайте
# функцию, которая
# принимает
# два
# списка
# и
# объединяет
# их
# в
# один, используя
# оператор *.
# 69.
# Создайте
# функцию, которая
# принимает
# аргументы
# для
# создания
# словаря
# с
# данными
# о
# студенте(имя, возраст, средний
# балл) и
# возвращает
# словарь, используя
# оператор **.
# 70.
# Напишите
# функцию, которая
# принимает
# два
# словаря
# с
# данными
# о
# книгах(название, автор, год
# издания) и
# объединяет
# их
# в
# один
# словарь, используя
# оператор **.
# 71.
# Создайте
# функцию, которая
# принимает
# аргументы
# для
# создания
# словаря
# с
# данными
# о
# компании(название, год
# основания, список
# сотрудников) и
# возвращает
# словарь, используя
# оператор **.
# 72.
# Создайте
# функцию - генератор, которая
# генерирует
# числа
# от
# 1
# до
# N.
# 73.
# Напишите
# функцию - генератор, которая
# генерирует
# четные
# числа
# от
# 0
# до
# N.
# 74.
# Создайте
# функцию - генератор, которая
# генерирует
# последовательность
# Фибоначчи
# до
# N
# элементов.
# 75.
# Преобразование
# списка
# строк
# в
# список
# их
# длин.
# 76.
# Умножение
# каждого
# элемента
# списка
# на
# определенное
# число.
# 77.
# Перевод
# температуры
# из
# Цельсия
# в
# Фаренгейт
# для
# списка
# температур.
# 78.
# Проверка, все
# ли
# элементы
# списка
# положительны.
# 79.
# Проверка, все
# ли
# элементы
# строки
# являются
# буквами
# верхнего
# регистра.
# 80.
# Проверка, все
# ли
# элементы
# вложенных
# списков
# являются
# числами.
# 81.
# Проверка, есть
# ли
# в
# списке
# хотя
# бы
# один
# отрицательный
# элемент.
# 83.
# Проверка, есть
# ли
# в
# строке
# хотя
# бы
# один
# символ
# верхнего
# регистра.
# 84.
# Проверка, есть
# ли
# во
# всех
# вложенных
# списках
# хотя
# бы
# один
# нулевой
# элемент.
# 85.
# Фильтрация
# списка, чтобы
# получить
# только
# положительные
# числа.
# 86.
# Фильтрация
# списка
# строк, чтобы
# получить
# только
# строки, содержащие
# определенную
# подстроку.
# 87.
# Фильтрация
# списка, чтобы
# получить
# только
# четные
# числа.
# 88.
# Создайте
# функцию, которая
# объединяет
# два
# списка
# чисел
# в
# список
# кортежей, где
# каждый
# кортеж
# содержит
# элементы
# с
# одинаковыми
# индексами.
# 89.
# Напишите
# функцию, которая
# объединяет
# список
# имен
# и
# список
# фамилий
# в
# список
# полных
# имён, используя
# zip().
# 90.
# Создайте
# функцию, которая
# объединяет
# список
# дат
# и
# список
# событий
# в
# словарь, где
# даты
# служат
# ключами, а
# события - значениями.
# 91.
# Отсортировать
# список
# чисел
# в
# порядке
# возрастания
# и
# сохранить
# результат
# в
# новом
# списке.
# 92.
# Отсортировать
# список
# строк
# в
# алфавитном
# порядке
# и
# вернуть
# отсортированный
# список.
# 93.
# Отсортировать
# список
# словарей
# по
# определенному
# ключу(например, "возраст"
# или
# "имя") и
# сохранить
# результат
# в
# новом
# списке.
# 94.
# Отсортируйте
# список
# словарей
# по
# ключу, представляющему
# дату.
# 95.
# Отсортируйте
# список
# кортежей
# сначала
# по
# первому
# элементу, а
# затем
# по
# второму
# элементу..
# 96.
# Отсортируйте
# список
# чисел
# через
# Bubble
# Sort.
# 97.
# Напишите
# программу, которая
# читает
# содержимое
# текстового
# файла
# и
# выводит
# его
# на
# экран.
# 98.
# Создайте
# программу, которая
# создает
# новый
# текстовый
# файл
# и
# записывает
# в
# него
# заданный
# текст.
# 99.
# Напишите
# функцию, которая
# читает
# текст
# из
# одного
# файла
# и
# записывает
# его
# в
# другой
# файл.
# 100.
# Создайте
# программу, которая
# добавляет
# текст
# в
# конец
# существующего
# текстового
# файла.
# 101.
# Напишите
# программу, которая
# создает
# бинарный
# файл
# и
# записывает
# в
# него
# список
# чисел.
# 102.
# Создайте
# функцию, которая
# читает
# содержимое
# бинарного
# файла
# и
# выводит
# его
# на
# экран.
# 103.
# Факториал
# числа: Напишите
# функцию, которая
# вычисляет
# факториал
# заданного
# положительного
# целого
# числа
# с
# использованием
# рекурсии.
# 104.
# Сумма
# чисел: Создайте
# функцию, которая
# вычисляет
# сумму
# всех
# чисел
# от
# 1
# до
# заданного
# положительного
# целого
# числа
# с
# использованием
# рекурсии.
# 105.
# Подсчет
# элементов: Напишите
# функцию, которая
# рекурсивно
# подсчитывает
# количество
# всех
# элементов
# во
# всех
# вложенных
# словарях.
# 106.
# Поиск
# значения
# по
# ключу: Создайте
# функцию, которая
# рекурсивно
# ищет
# значение
# по
# заданному
# ключу
# во
# всех
# вложенных
# словарях
# и
# возвращает
# его.
# 107.
# Счетчик
# с
# начальным
# значением: Создайте
# замыкание, которое
# предоставляет
# счетчик
# с
# возможностью
# установки
# начального
# значения
# при
# его
# создании.
# 108.
# Декоратор
# для
# логирования: Напишите
# декоратор, который
# регистрирует
# вызов
# функции
# и
# выводит
# информацию
# о
# нем, такую
# как
# имя
# функции
# и
# переданные
# аргументы.
# 109.
# Декоратор
# с
# параметрами
# для
# ограничения
# доступа: Напишите
# декоратор, который
# принимает
# список
# разрешений
# в
# качестве
# параметра
# и
# разрешает
# выполнение
# функции
# только
# пользователям
# с
# соответствующими
# разрешениями.
# ** * 110.
# Объявите
# два
# класса:
# Cell - для
# представления
# клетки
# игрового
# поля;
# GamePole - для
# управления
# игровым
# полем, размером
# N
# x
# N
# клеток.
# С
# помощью
# класса
# Cell
# предполагается
# создавать
# отдельные
# клетки
# командой:
# c1 = Cell(around_mines, mine)
# Здесь
# around_mines - число
# мин
# вокруг
# данной
# клетки
# поля;
# mine - булева
# величина(True / False), означающая
# наличие
# мины
# в
# текущей
# клетке.При
# этом, в
# каждом
# объекте
# класса
# Cell
# должны
# создаваться
# локальные
# свойства:
# around_mines - число
# мин
# вокруг
# клетки(начальное
# значение
# 0);
# mine - наличие / отсутствие
# мины
# в
# текущей
# клетке(True / False);
# fl_open - открыта / закрыта
# клетка - булево
# значение(True / False).Изначально
# все
# клетки
# закрыты(False).
#
# С
# помощью
# класса
# GamePole
# должна
# быть
# возможность
# создавать
# квадратное
# игровое
# поле
# с
# числом
# клеток
# N
# x
# N:
# pole_game = GamePole(N, M)
# Здесь
# N - размер
# поля;
# M - общее
# число
# мин
# на
# поле.При
# этом, каждая
# клетка
# представляется
# объектом
# класса
# Cell
# и
# все
# объекты
# хранятся
# в
# двумерном
# списке
# N
# x
# N
# элементов - локальном
# свойстве
# pole
# объекта
# класса
# GamePole.
# В
# классе
# GamePole
# должны
# быть
# также
# реализованы
# следующие
# методы:
# init() - инициализация
# поля
# с
# новой
# расстановкой
# M
# мин(случайным
# образом
# по
# игровому
# полю, разумеется
# каждая
# мина
# должна
# находиться
# в
# отдельной
# клетке).
# show() - отображение
# поля
# в
# консоли
# в
# виде
# таблицы
# чисел
# открытых
# клеток(если
# клетка
# не
# открыта, то
# отображается
# символ  # ; мина отображается символом *; между клетками при отображении ставить пробел).
# При
# создании
# экземпляра
# класса
# G1. Что такое класс в Python?
# a) Это способ создания списков
# b) Это объект, представляющий собой шаблон для создания других объектов
# c) Это способ определения функций
# d) Это способ создания переменных
#
# 2. Что такое объект в Python?
# a) Это способ создания списков
# b) Это экземпляр класса, имеющий свои собственные атрибуты и методы
# c) Это способ определения функций
# d) Это способ создания переменных
#
# 3. Какой метод вызывается при создании нового объекта класса?
# a) __new__()
# b) __init__()
# c) __del__()
# d) __str__()
#
# 4. Какой метод вызывается при удалении объекта класса?
# a) __new__()
# b) __init__()
# c) __del()__
# d) __str__()
#
# 5. Для чего используется метод __init__() в Python?
# a) Для создания нового объекта класса
# b) Для инициализации атрибутов объекта
# c) Для удаления объекта класса
# d) Для представления объекта в виде строки
#
# 6. Какие аргументы обязательно должны присутствовать в методе __init__()?
# a) self
# b) cls
# c) obj
# d) init
#
# 7. Какой метод вызывается, когда вы пытаетесь вывести объект на экран с помощью print()?
# a) __new__()
# b) __init__()
# c) __del()__
# d) __str__()
#
# 8. Для чего используется метод __str__()?
# a) Для создания нового объекта класса
# b) Для инициализации атрибутов объекта
# c) Для удаления объекта класса
# d) Для представления объекта в виде строки
#
# 9. Какой метод вызывается, когда объект класса уничтожается и освобождает ресурсы?
# a) __new__()
# b) __init__()
# c) __del()
# d) __str__()
#
# 10. Какие аргументы обязательно должны присутствовать в методе __str__()?
# a) self
# b) cls
# c) obj
# d) str
#
# 11. Что такое атрибут класса?
# a) Атрибут, который принадлежит объекту класса
# b) Атрибут, который принадлежит классу и разделяется всеми его объектами
# c) Атрибут, который можно изменять только при создании объекта
# d) Атрибут, который можно изменять только в методе __init__()
#
# 12. Как создать атрибут класса в Python?
# a) Просто присвоить значение переменной внутри класса
# b) Использовать метод __init__()
# c) Использовать метод __str__()
# d) Использовать метод __del()__
#
# 13. Как изменить значение атрибута класса?
# a) Изменить его внутри метода __init__()
# b) Изменить его внутри метода __str__()
# c) Изменить его внутри метода __del()__
# d) Изменить его внутри метода объекта
#
# 14. Что делает метод __new__()?
# a) Инициализирует объект
# b) Удаляет объект
# c) Создает новый объект класса
# d) Возвращает значение атрибута объекта
#
# 15.
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
# obj = MyClass(42)
# print(obj.value)
#
# Что выведет этот код?
# a) 42
# b) 0
# c) "42"
# d) Ошибка
#
# 16.
# class MyClass:
#     value = 10
#
# obj1 = MyClass()
# obj2 = MyClass()
# obj1.value = 20
#
# print(obj1.value, obj2.value)
#
#
# Что выведет этот код?
# a) 10 10
# b) 20 20
# c) 20 10
# d) 10 20
#
# 17.
# class MyClass:
#     def __del__(self):
#         print("Deleted")
#
# obj = MyClass()
# del obj
#
# Что выведет этот код?
# a) "Deleted"
# b) Ничего
# c) "MyClass object deleted"
# d) Ошибка
#
#
# 18.
# class MyClass:
#     def __str__(self):
#         return "MyClass"
#
# obj = MyClass()
# print(obj)
# Что выведет этот код?
# a) <main.MyClass object at 0x...>
# b) "MyClass"
# c) MyClass
# d) Ошибка
#
#
# 19.
# class MyClass:
#     def __init__(self):
#         self.value = 5
#
# obj = MyClass()
# obj.value = 7
# print(obj.value)
#
# Что выведет этот код?
# a) 0
# b) 5
# c) 7
# d) "MyClass(7)"
#
# 20.
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
# obj1 = MyClass(10)
# obj2 = MyClass(20)
# print(obj1.value + obj2.value)
#
# Что выведет этот код?
# a) 10
# b) 20
# c) 30
# d) 1020
#
# 21.
# class MyClass:
#     def __str__(self):
#         return str(self.value)
#
# obj = MyClass()
# print(obj)
#
# Что выведет этот код?
# a) <main.MyClass object at 0x...>
# b) "MyClass"
# c) 0
# d) Ошибка
#
# 22.
# class MyClass:
#     value = 10
#
# obj = MyClass()
# print(obj.value)
#
# Что выведет этот код?
# a) 0
# b) 10
# c) "MyClass(10)"
# d) Ошибка
#
# 23.
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
# obj1 = MyClass(42)
# obj2 = MyClass(42)
# print(obj1 is obj2)
#
# Что выведет этот код?
# a) True
# b) False
# c) Ошибка
# d) Ничего
#
# 24.
# class MyClass:
#     count = 0
#
#     def __init__(self):
#         MyClass.count += 1
#
# obj1 = MyClass()
# obj2 = MyClass()
# print(obj1.count)
#
# Что выведет этот код?
# a) 0
# b) 1
# c) 2
# d) Ошибка
#
# 25.
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
# obj = MyClass(42)
# del obj
# print(obj.value)
#
# Что выведет этот код?
# a) 42
# b) 0
# c) "42"
# d) Ошибка
#
#
# 26.
# class MyClass:
#     def __init__(self, value):
#         self.value = value
#
# obj1 = MyClass(10)
# obj2 = obj1
# obj2.value = 20
# print(obj1.value)
#
# Что выведет этот код?
# a) 10
# b) 20
# c) 0
# d) "MyClass(10)"
#
# 27.
# class MyClass:
#     value = 10
#
# obj = MyClass()
# obj.value = 15
# del obj.value
# print(obj.value)
#
# Что выведет этот код?
# a) 10
# b) 15
# c) 0
# d) Ошибка
#
# 28.
# class MyClass:
#     def __init__(self):
#         self.value = 5
#
# obj = MyClass()
# print(obj.value)
# obj.__dict__['value'] = 7
# print(obj.value)
#
# Что выведет этот код?
# a) 5 7
# b) 0 0
# c) 7 7
# d) Ошибка
#
# 29.
# class MyClass:
#     value = 10
#
# obj = MyClass()
# del obj.value
# print(obj.value)
#
# Что выведет этот код?
# a) 10
# b) 0
# c) Ошибка
# d) "MyClass(10)"
#
# 30.
# x = 5
#
# def func(x):
#     x = 10
#     return x
#
# print(func(x))
# print(x)
#
# Что выведет этот код?
# a) 5 10
# b) 10 10
# c) 10 5
# d) 5 5
#
# 31.
# def add(x, y=5):
#     return x + y
#
# result = add(3)
# print(result)
#
# Что выведет этот код?
# a) 3
# b) 5
# c) 8
# d) Ошибка
#
# 32.
# def increment(x):
#     x += 1
#
# num = 5
# increment(num)
# print(num)
#
# Что выведет этот код?
# a) 5
# b) 6
# c) Ошибка
# d) 0
#
# 33.
# def modify_list(lst):
#     lst.append(42)
#
# my_list = [1, 2, 3]
# modify_list(my_list)
# print(my_list)
#
# Что выведет этот код?
# a) [1, 2, 3]
# b) [1, 2, 3, 42]
# c) [42]
# d) Ошибка
#
# 34.
# def outer_function(x):
#     def inner_function(y):
#         return x + y
#     return inner_function
#
# add_five = outer_function(5)
# result = add_five(10)
# print(result)
#
# Что выведет этот код?
# a) 5
# b) 10
# c) 15
# d) Ошибка
#
# 35. def decorator(func):
#     def wrapper(x):
#         result = func(x)
#         return result * 2
#     return wrapper
#
# @decorator
# def add_one(x):
#     return x + 1
#
# result = add_one(3)
# print(result)
#
# Что выведет этот код?
# a) 3
# b) 6
# c) 8
# d) Ошибка
#
# 36.
# def square(func):
#     return lambda x: func(x) ** 2
#
# @square
# def identity(x):
#     return x
#
# result = identity(4)
# print(result)
#
# Что выведет этот код?
# a) 4
# b) 16
# c) 8
# d) Ошибка
#
# 37.
# def outer(x):
#     def inner(y):
#         return x * y
#     return inner
#
# multiply_by_two = outer(2)
# result = multiply_by_two(3)
# print(result)
#
# Что выведет этот код?
# a) 6
# b) 2
# c) 8
# d) Ошибка
#
# 38.
# def decorator(func):
#     def wrapper(*args, **kwargs):
#         result = func(*args, **kwargs)
#         return result * 2
#     return wrapper
#
# @decorator
# def add(x, y):
#     return x + y
#
# result = add(3, 4)
# print(result)
#
# Что выведет этот код?
# a) 3
# b) 8
# c) 14
# d) Ошибка
#
# 39.
# def factorial(n):
#     if n == 0:
#         return 1
#     else:
#         return n * factorial(n-1)
#
# result = factorial(5)
# print(result)
#
# Что выведет этот код?
# a) 15
# b) 120
# c) 25
# d) Ошибка
#
#
#
# 40.
# def decorator(arg1, arg2):
#     def real_decorator(func):
#         def wrapper(*args, **kwargs):
#             result = func(*args, **kwargs)
#             return result * (arg1 + arg2)
#         return wrapper
#     return real_decorator
#
# @decorator(2, 3)
# def add(x, y):
#     return x + y
#
# result = add(3, 4)
# print(result)
#
# Что выведет этот код?
# a) 14
# b) 35
# c) 70
# d) Ошибка
#
# 41. def execute(func, x):
#     return func(x)
#
# def square(x):
#     return x ** 2
#
# def cube(x):
#     return x ** 3
#
# result1 = execute(square, 5)
# result2 = execute(cube, 3)
# print(result1, result2)
#
# Что выведет этот код?
# a) 25 27
# b) 2527
# c) 14
# d) Ошибка
#
# 42. def modify_list(my_list):
#     my_list = [1, 2, 3, 4]
#     my_list.append(5)
#
# original_list = [10, 20, 30]
# modify_list(original_list)
# print(original_list)
#
# Что выведет этот код?
# a) [1, 2, 3, 4, 5]
# b) [10, 20, 30, 1, 2, 3, 4, 5]
# c) [10, 20, 30]
# d) Ошибка
#
#
# 43.
# a)	Создайте словарь, представляющий информацию о студенте (имя, возраст, средний балл).
# b)	Добавьте вложенные словари, чтобы представить информацию о нескольких студентах.
# c)	Найдите средний возраст среди всех студентов.
# d)	Найдите студента с наивысшим средним баллом.
#
# 44. Создайте список целых чисел и найдите сумму всех элементов.
# 45. Создайте список слов и найдите самое длинное слово.
# 46. Создайте два списка чисел и найдите их сумму попарно.
# 47. Создайте список и удалите из него все дубликаты.
# 48. Создайте список, содержащий списки чисел, и найдите сумму элементов внутренних списков.
# 49. Создайте список, в котором каждый элемент - это пара (имя, возраст), и найдите средний возраст.
# 50. Создайте список, представляющий матрицу, и выполните операцию транспонирования.
# 51. Напишите программу, которая находит самое длинное слово в строке.
# 52. Напишите программу, которая удаляет все знаки препинания из строки.
# 53. Напишите программу, которая проверяет, начинается ли строка с определенного префикса.
# 54. Создайте два множества и найдите их объединение.
# 55. Создайте два множества и найдите их пересечение.
# 56. Создайте множество с буквами алфавита и проверьте, содержит ли оно все гласные буквы.
# 57. Создайте множество с числами и найдите максимальное и минимальное значения.
# 58. Создайте два множества и найдите разницу между ними (элементы, которые есть в первом, но отсутствуют во втором).
# 59. Создайте словарь с данными о квартире (адрес, площадь, количество комнат) и выведите площадь квартиры.
# 60. Создайте словарь с данными о языке программирования (название, создатель, год создания) и найдите создателя языка.
# 61. Создайте список словарей, представляющий информацию о рецептах (название, ингредиенты и их количество) и найдите все рецепты, в которых используется определенный ингредиент.
# 62. Создайте список словарей, представляющий информацию о городах (название, население, страна) и найдите город с наибольшим населением.
# 63. Создайте функцию, которая определяет, является ли строка палиндромом.
# 64. Создайте функцию, которая находит наименьшее значение в списке чисел.
# 65. Создайте функцию, которая находит количество гласных букв в строке.
# 66. Создайте функцию, которая принимает произвольное количество аргументов и возвращает их сумму, используя оператор * для распаковки.
# 67. Напишите функцию, которая принимает список чисел и возвращает наименьшее число, используя оператор * для распаковки списка.
# 68. Создайте функцию, которая принимает два списка и объединяет их в один, используя оператор *.
# 69. Создайте функцию, которая принимает аргументы для создания словаря с данными о студенте (имя, возраст, средний балл) и возвращает словарь, используя оператор **.
# 70. Напишите функцию, которая принимает два словаря с данными о книгах (название, автор, год издания) и объединяет их в один словарь, используя оператор **.
# 71. Создайте функцию, которая принимает аргументы для создания словаря с данными о компании (название, год основания, список сотрудников) и возвращает словарь, используя оператор **.
# 72. Создайте функцию-генератор, которая генерирует числа от 1 до N.
# 73. Напишите функцию-генератор, которая генерирует четные числа от 0 до N.
# 74. Создайте функцию-генератор, которая генерирует последовательность Фибоначчи до N элементов.
# 75. Преобразование списка строк в список их длин.
# 76. Умножение каждого элемента списка на определенное число.
# 77. Перевод температуры из Цельсия в Фаренгейт для списка температур.
# 78. Проверка, все ли элементы списка положительны.
# 79. Проверка, все ли элементы строки являются буквами верхнего регистра.
# 80. Проверка, все ли элементы вложенных списков являются числами.
# 81. Проверка, есть ли в списке хотя бы один отрицательный элемент.
# 83. Проверка, есть ли в строке хотя бы один символ верхнего регистра.
# 84. Проверка, есть ли во всех вложенных списках хотя бы один нулевой элемент.
# 85. Фильтрация списка, чтобы получить только положительные числа.
# 86. Фильтрация списка строк, чтобы получить только строки, содержащие определенную подстроку.
# 87. Фильтрация списка, чтобы получить только четные числа.
# 88. Создайте функцию, которая объединяет два списка чисел в список кортежей, где каждый кортеж содержит элементы с одинаковыми индексами.
# 89. Напишите функцию, которая объединяет список имен и список фамилий в список полных имён, используя zip().
# 90. Создайте функцию, которая объединяет список дат и список событий в словарь, где даты служат ключами, а события - значениями.
# 91. Отсортировать список чисел в порядке возрастания и сохранить результат в новом списке.
# 92. Отсортировать список строк в алфавитном порядке и вернуть отсортированный список.
# 93. Отсортировать список словарей по определенному ключу (например, "возраст" или "имя") и сохранить результат в новом списке.
# 94. Отсортируйте список словарей по ключу, представляющему дату.
# 95. Отсортируйте список кортежей сначала по первому элементу, а затем по второму элементу..
# 96. Отсортируйте список чисел через Bubble Sort.
# 97. Напишите программу, которая читает содержимое текстового файла и выводит его на экран.
# 98. Создайте программу, которая создает новый текстовый файл и записывает в него заданный текст.
# 99. Напишите функцию, которая читает текст из одного файла и записывает его в другой файл.
# 100. Создайте программу, которая добавляет текст в конец существующего текстового файла.
# 101. Напишите программу, которая создает бинарный файл и записывает в него список чисел.
# 102. Создайте функцию, которая читает содержимое бинарного файла и выводит его на экран.
# 103. Факториал числа: Напишите функцию, которая вычисляет факториал заданного положительного целого числа с использованием рекурсии.
# 104. Сумма чисел: Создайте функцию, которая вычисляет сумму всех чисел от 1 до заданного положительного целого числа с использованием рекурсии.
# 105. Подсчет элементов: Напишите функцию, которая рекурсивно подсчитывает количество всех элементов во всех вложенных словарях.
# 106. Поиск значения по ключу: Создайте функцию, которая рекурсивно ищет значение по заданному ключу во всех вложенных словарях и возвращает его.
# 107. Счетчик с начальным значением: Создайте замыкание, которое предоставляет счетчик с возможностью установки начального значения при его создании.
# 108. Декоратор для логирования: Напишите декоратор, который регистрирует вызов функции и выводит информацию о нем, такую как имя функции и переданные аргументы.
# 109. Декоратор с параметрами для ограничения доступа: Напишите декоратор, который принимает список разрешений в качестве параметра и разрешает выполнение функции только пользователям с соответствующими разрешениями.
# ***110.  Объявите два класса:
# Cell - для представления клетки игрового поля;
# GamePole - для управления игровым полем, размером N x N клеток.
# С помощью класса Cell предполагается создавать отдельные клетки командой:
# c1 = Cell(around_mines, mine)
# Здесь around_mines - число мин вокруг данной клетки поля; mine - булева величина (True/False), означающая наличие мины в текущей клетке. При этом, в каждом объекте класса Cell должны создаваться локальные свойства:
# around_mines - число мин вокруг клетки (начальное значение 0);
# mine - наличие/отсутствие мины в текущей клетке (True/False);
# fl_open - открыта/закрыта клетка - булево значение (True/False). Изначально все клетки закрыты (False).
#
# С помощью класса GamePole должна быть возможность создавать квадратное игровое поле с числом клеток N x N:
# pole_game = GamePole(N, M)
# Здесь N - размер поля; M - общее число мин на поле. При этом, каждая клетка представляется объектом класса Cell и все объекты хранятся в двумерном списке N x N элементов - локальном свойстве pole объекта класса GamePole.
# В классе GamePole должны быть также реализованы следующие методы:
# init() - инициализация поля с новой расстановкой M мин (случайным образом по игровому полю, разумеется каждая мина должна находиться в отдельной клетке).
# show() - отображение поля в консоли в виде таблицы чисел открытых клеток (если клетка не открыта, то отображается символ #; мина отображается символом *; между клетками при отображении ставить пробел).
# При создании экземпляра класса GamePole в его инициализаторе следует вызывать метод init() для первоначальной инициализации игрового поля.
# В классе GamePole могут быть и другие вспомогательные методы.
# Создайте экземпляр pole_game класса GamePole с размером поля N = 10 и числом мин M = 12.
#
#
# amePole
# в
# его
# инициализаторе
# следует
# вызывать
# метод
# init()
# для
# первоначальной
# инициализации
# игрового
# поля.
# В
# классе
# GamePole
# могут
# быть
# и
# другие
# вспомогательные
# методы.
# Создайте
# экземпляр
# pole_game
# класса
# GamePole
# с
# размером
# поля
# N = 10
# и
# числом
# мин
# M = 12.
#
#
