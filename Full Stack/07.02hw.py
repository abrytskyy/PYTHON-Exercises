###Катерина


#Дан словарь с информацией о путешествиях. Каждое путешествие представлено вложенным словарем с ключами
# "название", "страна" и "бюджет". Отсортируйте путешествия по возрастанию бюджета.
trips1 = {
    1:{"название": "Париж", "страна": "Франция", "бюджет": 3000},
    2:{"название": "Рим", "страна": "Италия", "бюджет": 2500},
    3:{"название": "Токио", "страна": "Япония", "бюджет": 5000},
    4:{"название": "Нью-Йорк", "страна": "США", "бюджет": 4000}
}

trips = [
    {"название": "Париж", "страна": "Франция", "бюджет": 3000},
    {"название": "Рим", "страна": "Италия", "бюджет": 2500},
    {"название": "Токио", "страна": "Япония", "бюджет": 5000},
    {"название": "Нью-Йорк", "страна": "США", "бюджет": 4000}
]


sorted_a = sorted(trips, key = lambda x: x["бюджет"])

for i in sorted_a:
    #print({i["название"]}, {i["страна"]}, {i["бюджет"]})
    print(i)











#Дан словарь с информацией о компьютерных играх. Каждая игра представлена вложенным словарем
# с ключами "название", "жанр" и "платформа". Найдите игры определенной платформы.

games = {
    1: {"название": "The Witcher 3", "жанр": "RPG", "платформа": "PC"},
    2: {"название": "Red Dead Redemption 2", "жанр": "Action", "платформа": "PS4"},
    3: {"название": "The Legend of Zelda: Breath of the Wild", "жанр": "Adventure", "платформа": "Switch"},
    4: {"название": "Halo Infinite", "жанр": "Shooter", "платформа": "Xbox Series X"},
    5: {"название": "Cyberpunk 2077", "жанр": "RPG", "платформа": "PC"}
}
def certain_games_by_platforms(a, b):
    return {
        k: v for k, v in a.items() if v["платформа"] == b
    }
print(certain_games_by_platforms(games, "PC"))

for k,v in games.items():
    if v["платформа"] == "PC":
        print(k,v)



#Дан словарь с информацией о покупках пользователей. Каждая покупка представлена вложенным словарем с ключами
# "пользователь", "продукт" и "количество". Посчитайте общее количество продуктов, купленных каждым пользователем.
purchases = [
    {"пользователь": "user1", "продукт": "product1", "количество": 3},
    {"пользователь": "user2", "продукт": "product2", "количество": 5},
    {"пользователь": "user1", "продукт": "product2", "количество": 2},
    {"пользователь": "user3", "продукт": "product1", "количество": 1},
    {"пользователь": "user2", "продукт": "product3", "количество": 2},
]
def sum_prod(a):
    return sum([i["количество"] for i in a])
print(sum_prod(purchases))


def sum_prod(a):
    sum = 0
    for i in a:
        sum += i["количество"]
    return sum
print(sum_prod(purchases))




###Артём
#Дан словарь с информацией о командах и их игроках. Каждая команда представлена вложенным словарем с ключами
# "название" и "игроки", где игроки являются вложенным словарем с ключами "имя" и "возраст". Найдите команды с игроками определенного возраста.


teams = {
    "team1": {
        "название": "Команда 1",
        "игроки": {
            "игрок1": {"имя": "Иван", "возраст": 25},
            "игрок2": {"имя": "Петр", "возраст": 22},
            "игрок3": {"имя": "Мария", "возраст": 27}
        }
    },
    "team2": {
        "название": "Команда 2",
        "игроки": {
            "игрок4": {"имя": "Алексей", "возраст": 30},
            "игрок5": {"имя": "Ольга", "возраст": 22},
            "игрок6": {"имя": "Елена", "возраст": 25}
        }
    },
    "team3": {
        "название": "Команда 3",
        "игроки": {
            "игрок7": {"имя": "Дмитрий", "возраст": 22},
            "игрок8": {"имя": "Анна", "возраст": 28},
            "игрок9": {"имя": "Александр", "возраст": 25}
        }
    }
}



def find_teams_by_age(a):
    age = input("Input age: ")

    a2 = {}
    for k, v in a.items():
        a1 = {}
        for kv, vv in v["игроки"].items():
            if vv["возраст"] == int(age):
                a1[kv] = vv["имя"]
        a2[v["название"]] = a1

    return a2

print(find_teams_by_age(teams))

#Дан словарь с информацией о фильмах. Каждый фильм представлен вложенным словарем с ключами
# "название", "режиссер" и "жанр". Найдите фильмы определенного жанра.
films = {
    1: {"название": "Побег из Шоушенка", "режиссер": "Фрэнк Дарабонт", "жанр": "драма"},
    2: {"название": "Зеленая миля", "режиссер": "Фрэнк Дарабонт", "жанр": "драма"},
    3: {"название": "Матрица", "режиссер": "Лана и Лилли Вачовски", "жанр": "фантастика"},
    4: {"название": "Интерстеллар", "режиссер": "Кристофер Нолан", "жанр": "фантастика"},
    5: {"название": "Гладиатор", "режиссер": "Ридли Скотт", "жанр": "приключения"},
    6: {"название": "Титаник", "режиссер": "Джеймс Кэмерон", "жанр": "драма"},
}
def genre(a):
    b = input("Input genre: ")
    a1 = {}
    for k,v in a.items():
        if v["жанр"] == b:
            a1[k]=v
    return a1
filtered_films = genre(films)
for movie_id, movie_details in filtered_films.items():
    print(f"{movie_id}:{movie_details}")

def genre(a):
    b = input("Input genre: ")
    a1 = {}
    for k,v in a.items():
        if v["жанр"] == b:
            a1[k]=v
    return a1
print(genre(films))




#Дан словарь с информацией о студентах и их предметах. Каждый студент представлен вложенным словарем
# с ключами "имя" и "предметы", где предметы являются вложенным словарем с ключами "название" и "оценка".
# Найдите студента с наибольшим средним баллом по предметам.
students_info = {
    "Студент1": {"имя": "Студент1", "предметы": {"Математика": {"название": "Математика", "оценка": 4}, "Физика": {"название": "Физика", "оценка": 5}}},
    "Студент2": {"имя": "Студент2", "предметы": {"Математика": {"название": "Математика", "оценка": 4}, "Физика": {"название": "Физика", "оценка": 4}}},
    "Студент3": {"имя": "Студент3", "предметы": {"Математика": {"название": "Математика", "оценка": 5}, "Физика": {"название": "Физика", "оценка": 5}}},
}

def average(a):
    sum1 = []
    for k,v in a.items():
        sum = 0
        num = 0
        for kv,vv in v["предметы"].items():
            sum += vv["оценка"]
            num += 1
        sum1.append(sum/num)
    return max(sum1)

print(average(students_info))





### @Denwork21
#Дан словарь с информацией о городах. Каждый город представлен вложенным словарем с ключами
# "название", "страна" и "население". Отсортируйте города по убыванию населения.
cities_info = {
    "Москва": {"название": "Москва", "страна": "Россия", "население": 12655050},
    "Санкт-Петербург": {"название": "Санкт-Петербург", "страна": "Россия", "население": 5398064},
    "Нью-Йорк": {"название": "Нью-Йорк", "страна": "США", "население": 8175133},
    "Токио": {"название": "Токио", "страна": "Япония", "население": 37393128},
}
def population_down(a):
    a1 = sorted(a.values(), key = lambda x: x["население"], reverse = True)
    return a1

print(population_down(cities_info))

cities_info = {
    "Москва": {"название": "Москва", "страна": "Россия", "население": 12655050},
    "Санкт-Петербург": {"название": "Санкт-Петербург", "страна": "Россия", "население": 5398064},
    "Нью-Йорк": {"название": "Нью-Йорк", "страна": "США", "население": 8175133},
    "Токио": {"название": "Токио", "страна": "Япония", "население": 37393128},
}
def population_down(a):
    a1 = sorted(a.values(), key = lambda x: x["население"], reverse = True)
    return a1

print(population_down(cities_info))



#Дан словарь с информацией о странах. Каждая страна представлена вложенным словарем с ключами
# "название", "столица" и "население". Найдите страну с наибольшим населением.


countries_info = {
    "Россия": {"название": "Россия", "столица": "Москва", "население": 146599183},
    "США": {"название": "США", "столица": "Вашингтон", "население": 331002651},
    "Китай": {"название": "Китай", "столица": "Пекин", "население": 1439323776},
    "Индия": {"название": "Индия", "столица": "Нью-Дели", "население": 1380004385},
}
def find_lagest_population(a):
    population = 0
    country = None
    for k,v in a.items():

        if v["население"] > population:
            population = v["население"]
            country = k
    return country
print(find_lagest_population(countries_info))



#Дан словарь с информацией о книгах в библиотеке. Каждая книга представлена вложенным словарем
# с ключами "название", "автор" и "год издания". Найдите самую старую книгу.
library = {
    1: {"название": "Книга 1", "автор": "Автор 1", "год издания": 2000},
    2: {"название": "Книга 2", "автор": "Автор 2", "год издания": 1985},
    3: {"название": "Книга 3", "автор": "Автор 3", "год издания": 1999},
}
def find_oldest_book(a):
    oldest_book = None
    oldest_year = float("inf")

    for v in a.values():
        if isinstance(a, dict) and "год издания" in v:
            year = v["год издания"]
            if isinstance(year, int) and year < oldest_year:
                oldest_year = year
                oldest_book = v
    return oldest_book



print(find_oldest_book(library))